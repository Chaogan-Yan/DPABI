function [Data_Corrected, ClusterSize, Header]=y_ApplyAlphaSimThreshold(StatsImgFile,VoxelPThreshold,IsTwoTailed,ClusterSize,ConnectivityCriterion,OutputName,MaskFile,Flag,Df1,Df2,VoxelSize,Header)
% function [Data_Corrected, ClusterSize, Header]=y_ApplyAlphaSimThreshold(StatsImgFile,VoxelPThreshold,IsTwoTailed,ClusterSize,ConnectivityCriterion,OutputName,MaskFile,Flag,Df1,Df2,VoxelSize,Header)
% Function to apply cluster threshold generated by AlphaSim.
% Input:
%     StatsImgFile      - The statistical image file name. Could be either Z, T, F or R statistical image. T/F/R images will transformed into Z image (according to their degree of freedom Df1, Df2) to perform further smoothness estimation and cluster thresholding.
%     VoxelPThreshold   - P threshold for each voxel. Will be transformed into Z threshold in two-tailed way or one-tailed way. Note: FSL's Z>2.3 corresponds to one-tailed VoxelPThreshold = 0.0107. |Z|>2.3 corresponds to two-tailed VoxelPThreshold = 0.0214.
%     IsTwoTailed       - 0: in one-tailed way. 1: converting voxel P threshold to z threshold in two-tailed way. Correct positive values to Cluster P at ClusterPThreshold/2, and correct negative values to Cluster P at ClusterPThreshold/2. Together the Cluster P < ClusterPThreshold.
%     ClusterSize       - Cluster Size
%     ConnectivityCriterion - Set Connectivity Criterion, could be: 1) 6 - six neighboring voxels (surface connected)? 2) 18 - eighteen neighboring voxels (edge connected, SPM use this criterion); 3) 26 - twenty-six neighboring voxels (corner connected).
%                  - default: 26
%     OutputName        - The output file name. Will be suffixed by'Z_ClusterThresholded_'.
%                       - 'DO NOT OUTPUT IMAGE': means called by rest_sliceviewer, and do not need to write into a file.
%     MaskFile          - The mask file name. If empty (i.e., ''), then all voxels are included.
%     Flag              - 'Z', 'T', 'F' or 'R'. Indicate the type of the input statistical image
%                       - If not defined or defined as empty, then will read the statistical type and degree of freedom information from the image (if the statistical analysis was performed with REST or SPM).
%     Df1               - The degree of freedom of the statistical image. For F statistical image, there is also Df2
%     Df2               - The second degree of freedom of F statistical image
%     VoxelSize         - The Voxel's size of the image inputed. Defined when call by rest_sliceviewer.
%     Header            - The Header of the nifti image.
% Output:
%     The image file (Z statistical image) after correction.
%     Data_Corrected    - The Data matrix after correction
%     ClusterSize       - The cluster size
%     Header            - The output Header of the nifti image.
%___________________________________________________________________________
% Written by YAN Chao-Gan 171001 based on y_GRF_Threshold.m.
% The R-fMRI Lab, Institute of Psychology, Chinese Academy of Sciences, Beijing, China
% ycg.yan@gmail.com

if ~exist('VoxelSize','var')
    VoxelSize = ''; % The voxel size will be defined later
end

if isempty(ConnectivityCriterion)
    ConnectivityCriterion = 26;
end

[OutPath, OutName,OutExt]=fileparts(OutputName);
if isempty(OutPath)
    OutPath='.';
end

%Read Header in.
if (~exist('Header','var')) || (exist('Header','var') && isempty(Header))
    [BrainVolume, VoxelSize, Header]=y_ReadRPI(StatsImgFile);
end

%Read Mask
[nDim1 nDim2 nDim3 nDimTimePoints]=size(BrainVolume);
if ~isempty(MaskFile)
    [MaskData,MaskVox,MaskHead]=y_ReadRPI(MaskFile);
else
    MaskData=ones(nDim1,nDim2,nDim3);
end
nVoxels=length(find(MaskData));

%Added by YAN Chao-Gan 121222. Detect the Flag and DF from the data if Flag is not defined.
if (~exist('Flag','var')) || (exist('Flag','var') && isempty(Flag))
   Header_DF = w_ReadDF(Header);
   Flag = Header_DF.TestFlag;
   Df1 = Header_DF.Df;
   Df2 = Header_DF.Df2;
end

if ~strcmpi(Flag,'Z')
    fprintf('Converting the %s maps into Z maps.\n',Flag);
    if ~exist('Df2','var')
        Df2=0;
    end
    [Z P] = y_TFRtoZ(StatsImgFile,[OutPath,filesep,'Z_BeforeThreshold_',OutName,OutExt],Flag,Df1,Df2);
end

if IsTwoTailed
    zThrd=norminv(1 - VoxelPThreshold/2);
else
    zThrd=norminv(1 - VoxelPThreshold);
end
fprintf('The voxel Z threshold for voxel p threshold %f is: %f.\n',VoxelPThreshold,zThrd);

fprintf('Cluster Size: %f voxels\n',ClusterSize);

if strcmpi(Flag,'Z')
    [BrainVolume, VoxelSize, Header]=y_ReadRPI(StatsImgFile);
else
    [BrainVolume, VoxelSize, Header]=y_ReadRPI([OutPath,filesep,'Z_BeforeThreshold_',OutName,OutExt]);
end

%Apply the Mask to the Brain Volume
BrainVolume = BrainVolume.*MaskData;


if ClusterSize > 0
    if IsTwoTailed % If Two Tailed, then correct negative values to Cluster P at ClusterPThreshold/2 first.
        BrainVolumeNegative = BrainVolume .* (BrainVolume <= -1*zThrd);
        [theObjMask, theObjNum]=bwlabeln(BrainVolumeNegative,ConnectivityCriterion);
        for x=1:theObjNum,
            theCurrentCluster = theObjMask==x;
            if length(find(theCurrentCluster)) < ClusterSize,
                BrainVolumeNegative(logical(theCurrentCluster))=0;
            end
        end
    else
        BrainVolumeNegative = 0;
    end
    
    % Correct positive values to Cluster P
    BrainVolume = BrainVolume .* (BrainVolume >= zThrd);
    [theObjMask, theObjNum]=bwlabeln(BrainVolume,ConnectivityCriterion);
    for x=1:theObjNum,
        theCurrentCluster = theObjMask==x;
        if length(find(theCurrentCluster)) < ClusterSize,
            BrainVolume(logical(theCurrentCluster))=0;
        end
    end
    
    BrainVolume = BrainVolume + BrainVolumeNegative;
end

Header.pinfo = [1;0;0];
Header.dt    =[16,0];
if ~isempty(OutputName)
    y_Write(BrainVolume,Header,[OutPath,filesep,'Z_ClusterThresholded_',OutName,OutExt]);
    if ~strcmpi(Flag,'Z') %Write the thresholded T or F image. YAN Chao-Gan, 160810
        [BrainVolumeRawStats]=y_ReadRPI(StatsImgFile);
        BrainVolumeRawStats = BrainVolumeRawStats .* (BrainVolume~=0);
        y_Write(BrainVolumeRawStats,Header,[OutPath,filesep,'ClusterThresholded_',OutName,OutExt]);
    end
end

Data_Corrected=BrainVolume;

